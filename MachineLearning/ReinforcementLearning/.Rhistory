rbinom(n = 100, size = 2, prob = 0.5)
rbinom(n = 100, size = 1, prob = 0.5)
sample(x = c(1,0), size = 100, replace = T)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
sample(x = c(1,0), size = 100, replace = T)
sample(x = c(1,0), size = 1, replace = T)
sample(x = c(1,0), size = 1, replace = T)
sample(x = c(1,0), size = 1, replace = T)
sample(x = c(1,0), size = 1, replace = T)
sample(x = c(1,0), size = 1, replace = T)
sample(x = c(1,0), size = 1, replace = T)
sample(x = c(1:6), size = 3, replace = T, prob = 1/6)
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
rep(1/6,6)
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
sample(x = c(1:6), size = 3, replace = T, prob = rep(x = 1/6,6))
# Dataset
dataset <- read.csv(file = "Datasets/Ads_CTR_Optimisation.csv")
View(dataset)
385 * (1-0.15)
150 * (1-0.15)
150 * 0.15
150 - 22.5
180*80
126000000*0.25
126000000*0.25
6.7*2
6.7*2 * 1200000
1200000*0.134
1200000*0.134/3
sample(1:10,1)
sample(1:10,1)
sample(1:10,1)
sample(1:10,1)
N <- 10000
d <- 10
ads_selected <- integer(0)
total_reward = 0
for (n in 1:N) {
ad <- sample(1:10,1)
ads_selected <- append(ads_selected, ad)
reward <- dataset[n,ad]
total_reward <- total_reward + reward
}
hist(x = ads_selected,
col ="steelblue2",
main = "Histogram of ads selections",
xlab = "Ads",
ylab = "Freq")
ads_selected <- integer(0)
total_reward = 0
for (n in 1:N) {
ad <- sample(1:10,1)
ads_selected <- append(ads_selected, ad)
reward <- dataset[n,ad]
total_reward <- total_reward + reward
}
hist(x = ads_selected,
col ="steelblue2",
main = "Histogram of ads selections",
xlab = "Ads",
ylab = "Freq")
# Dataset
dataset <- read.csv(file = "Datasets/Ads_CTR_Optimisation.csv")
1e400
1e100
1e10
# 1
N <- 10000
d <- 10 # 10 versiones del mismo anuncio
number_of_selections <- integer(d) # Numero de veces que se selecciono el anuncio
sums_rewards <- integer(d) # Guarda la suma de las recompensas
# 2
# Recompensa media y limite superior
ads_selected <- integer(0)
total_reward <- 0
for(n in 1:N) {
max_upper_bound <- 0
ad <- 0
for(i in 1:d){
if (number_of_selections > 0) {
average_reward <- sums_rewards[i] / number_of_selections[i]
delta_i <- sqrt(3/2 * log(n) / number_of_selections[i])
upper_bound <- average_reward + delta_i
}else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound <- upper_bound
ad <- i
}
}
ads_selected <- append(ads_selected, ad)
number_of_selections[ad] <- number_of_selections[ad] + 1
reward <- dataset[n, ad]
sums_rewards[ad] <- sums_rewards[ad] + reward
total_reward <- total_reward + reward
}
# Dataset
dataset <- read.csv(file = "Datasets/Ads_CTR_Optimisation.csv")
# Implementacion de UCB
# 1
N <- 10000
d <- 10 # 10 versiones del mismo anuncio
number_of_selections <- integer(d) # Numero de veces que se selecciono el anuncio
sums_rewards <- integer(d) # Guarda la suma de las recompensas
# 2
# Recompensa media y limite superior
ads_selected <- integer(0)
total_reward <- 0
for(n in 1:N) {
max_upper_bound <- 0
ad <- 0
for(i in 1:d){
if (number_of_selections[i] > 0) {
average_reward <- sums_rewards[i] / number_of_selections[i]
delta_i <- sqrt(3/2 * log(n) / number_of_selections[i])
upper_bound <- average_reward + delta_i
}else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound <- upper_bound
ad <- i
}
}
ads_selected <- append(ads_selected, ad)
number_of_selections[ad] <- number_of_selections[ad] + 1
reward <- dataset[n, ad]
sums_rewards[ad] <- sums_rewards[ad] + reward
total_reward <- total_reward + reward
}
hist(ads_selected,
col = 'steelblue2',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
ads_selected
ads_selected[9500:10000]
# Dataset
dataset <- read.csv(file = "Datasets/Ads_CTR_Optimisation.csv")
# Implementacion del Muestreo Thompson
N <- 10000
d <- 10 # 10 versiones del mismo anuncio
number_rewards_1 <- integer(d)
number_rewards_0 <- integer(d)
ads_selected <- integer(0)
total_reward <- 0
for(n in 1:N) {
max_random <- 0
ad <- 0
for(i in 1:d){
random_beta <- rbeta(n = 1,
shape1 = number_rewards_1[i] + 1,
shape2 = number_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random <- random_beta
ad <- i
}
}
ads_selected <- append(ads_selected, ad)
reward <- dataset[n, ad]
if (reward == 1) {
number_rewards_1[ad] <- number_rewards_1[ad] + 1
}else {
number_rewards_0[ad] <- number_rewards_0[ad] + 1
}
total_reward <- total_reward + reward
}
# Histograma
hist(ads_selected,
col = 'steelblue2',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Times Selected')
N <- 10000
d <- 10 # 10 versiones del mismo anuncio
number_rewards_1 <- integer(d)
number_rewards_0 <- integer(d)
ads_selected <- integer(0)
total_reward <- 0
for(n in 1:N) {
max_random <- 0
ad <- 0
for(i in 1:d){
random_beta <- rbeta(n = 1,
shape1 = number_rewards_1[i] + 1,
shape2 = number_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random <- random_beta
ad <- i
}
}
ads_selected <- append(ads_selected, ad)
reward <- dataset[n, ad]
if (reward == 1) {
number_rewards_1[ad] <- number_rewards_1[ad] + 1
}else {
number_rewards_0[ad] <- number_rewards_0[ad] + 1
}
total_reward <- total_reward + reward
}
# Histograma
hist(ads_selected,
col = 'steelblue2',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Times Selected')
N <- 10000
d <- 10 # 10 versiones del mismo anuncio
number_rewards_1 <- integer(d)
number_rewards_0 <- integer(d)
ads_selected <- integer(0)
total_reward <- 0
for(n in 1:N) {
max_random <- 0
ad <- 0
for(i in 1:d){
random_beta <- rbeta(n = 1,
shape1 = number_rewards_1[i] + 1,
shape2 = number_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random <- random_beta
ad <- i
}
}
ads_selected <- append(ads_selected, ad)
reward <- dataset[n, ad]
if (reward == 1) {
number_rewards_1[ad] <- number_rewards_1[ad] + 1
}else {
number_rewards_0[ad] <- number_rewards_0[ad] + 1
}
total_reward <- total_reward + reward
}
# Histograma
hist(ads_selected,
col = 'steelblue2',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Times Selected')
N <- 10000
d <- 10 # 10 versiones del mismo anuncio
number_rewards_1 <- integer(d)
number_rewards_0 <- integer(d)
ads_selected <- integer(0)
total_reward <- 0
for(n in 1:N) {
max_random <- 0
ad <- 0
for(i in 1:d){
random_beta <- rbeta(n = 1,
shape1 = number_rewards_1[i] + 1,
shape2 = number_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random <- random_beta
ad <- i
}
}
ads_selected <- append(ads_selected, ad)
reward <- dataset[n, ad]
if (reward == 1) {
number_rewards_1[ad] <- number_rewards_1[ad] + 1
}else {
number_rewards_0[ad] <- number_rewards_0[ad] + 1
}
total_reward <- total_reward + reward
}
# Histograma
hist(ads_selected,
col = 'steelblue2',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Times Selected')
N <- 10000
d <- 10 # 10 versiones del mismo anuncio
number_rewards_1 <- integer(d)
number_rewards_0 <- integer(d)
ads_selected <- integer(0)
total_reward <- 0
for(n in 1:N) {
max_random <- 0
ad <- 0
for(i in 1:d){
random_beta <- rbeta(n = 1,
shape1 = number_rewards_1[i] + 1,
shape2 = number_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random <- random_beta
ad <- i
}
}
ads_selected <- append(ads_selected, ad)
reward <- dataset[n, ad]
if (reward == 1) {
number_rewards_1[ad] <- number_rewards_1[ad] + 1
}else {
number_rewards_0[ad] <- number_rewards_0[ad] + 1
}
total_reward <- total_reward + reward
}
# Histograma
hist(ads_selected,
col = 'steelblue2',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Times Selected')
N <- 10000
d <- 10 # 10 versiones del mismo anuncio
number_rewards_1 <- integer(d)
number_rewards_0 <- integer(d)
ads_selected <- integer(0)
total_reward <- 0
for(n in 1:N) {
max_random <- 0
ad <- 0
for(i in 1:d){
random_beta <- rbeta(n = 1,
shape1 = number_rewards_1[i] + 1,
shape2 = number_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random <- random_beta
ad <- i
}
}
ads_selected <- append(ads_selected, ad)
reward <- dataset[n, ad]
if (reward == 1) {
number_rewards_1[ad] <- number_rewards_1[ad] + 1
}else {
number_rewards_0[ad] <- number_rewards_0[ad] + 1
}
total_reward <- total_reward + reward
}
# Histograma
hist(ads_selected,
col = 'steelblue2',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Times Selected')
N <- 10000
d <- 10 # 10 versiones del mismo anuncio
number_rewards_1 <- integer(d)
number_rewards_0 <- integer(d)
ads_selected <- integer(0)
total_reward <- 0
for(n in 1:N) {
max_random <- 0
ad <- 0
for(i in 1:d){
random_beta <- rbeta(n = 1,
shape1 = number_rewards_1[i] + 1,
shape2 = number_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random <- random_beta
ad <- i
}
}
ads_selected <- append(ads_selected, ad)
reward <- dataset[n, ad]
if (reward == 1) {
number_rewards_1[ad] <- number_rewards_1[ad] + 1
}else {
number_rewards_0[ad] <- number_rewards_0[ad] + 1
}
total_reward <- total_reward + reward
}
# Histograma
hist(ads_selected,
col = 'steelblue2',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Times Selected')
ads_selected
sum(ads_selected == 5)
sum(ads_selected == 2)
sum(ads_selected == 8)
i
d
N
ad
number_rewards_1
number_rewards_0
ads_selected
ad
number_rewards_1
View(dataset)
rbeta(1, 1,1)
ad
dataset <- read.csv(file = "Datasets/Ads_CTR_Optimisation.csv")
# Implementacion del Muestreo Thompson
N <- 10000
d <- 10 # 10 versiones del mismo anuncio
number_rewards_1 <- integer(d)
number_rewards_0 <- integer(d)
ads_selected <- integer(0)
total_reward <- 0
d
N
number_rewards_0
number_rewards_1
ads_selected
