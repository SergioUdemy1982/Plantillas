size = 3,
alpha = 0.7) +
labs(title = "Years Experience vs Salary",
color = "Mean") +
scale_color_manual(labels = c("Menor", "Mayor"),
values = c("#C4961A", "#00AFBB")) +
geom_smooth(mapping = aes(x = YearsExperience, y = Salary))
#
#
# Construimos un diagrama de puntos para visualizar la relacion entre variables
plt +
geom_point(mapping = aes(x = YearsExperience, y = Salary,
colour = Salary >= mean(Salary)),
size = 3,
alpha = 0.7) +
labs(title = "Years Experience vs Salary",
color = "Mean") +
scale_color_manual(labels = c("Menor", "Mayor"),
values = c("#C4961A", "#00AFBB"))
plt +
geom_boxplot(mapping = aes(x = YearsExperience), fill = "steelblue", alpha = 0.7) +
coord_flip() +
ggtitle(label = "Years Experience Boxplot") # No presenta outliers
plt +
geom_boxplot(mapping = aes(y = Salary), fill = "#FFDB6D", alpha = 0.7) +
ggtitle(label = "Salary Boxplot") # No presenta outliers
#
# Construimos un histograma para visualizar mejor la distribucion de los datos
plt +
geom_histogram(mapping = aes(x = YearsExperience),
bins = 8,
fill = "steelblue",
alpha = 0.7) +
labs(title = "Years Experience Histogram",
x = "Years Experience",
y = "Count")
plt +
geom_histogram(mapping = aes(x = Salary),
bins = 8,
fill = "#D16103",
alpha = 0.7) +
labs(title = "Salary Histogram",
x = "Salary",
y = "Count")
#
#
# Construimos un diagrama de puntos para visualizar la relacion entre variables
plt +
geom_point(mapping = aes(x = YearsExperience, y = Salary,
colour = Salary >= mean(Salary)),
size = 3,
alpha = 0.7) +
labs(title = "Years Experience vs Salary",
color = "Mean") +
scale_color_manual(labels = c("Menor", "Mayor"),
values = c("#C4961A", "#00AFBB"))
plt +
geom_boxplot(mapping = aes(x = YearsExperience), fill = "#00AFBB", alpha = 0.7) +
coord_flip() +
ggtitle(label = "Years Experience Boxplot") # No presenta outliers
plt +
geom_boxplot(mapping = aes(y = Salary), fill = "#C4961A", alpha = 0.7) +
ggtitle(label = "Salary Boxplot") # No presenta outliers
#
# Construimos un histograma para visualizar mejor la distribucion de los datos
plt +
geom_histogram(mapping = aes(x = YearsExperience),
bins = 8,
fill = "#00AFBB",
alpha = 0.7) +
labs(title = "Years Experience Histogram",
x = "Years Experience",
y = "Count")
plt +
geom_histogram(mapping = aes(x = Salary),
bins = 8,
fill = "#C4961A",
alpha = 0.7) +
labs(title = "Salary Histogram",
x = "Salary",
y = "Count")
#
#
# Construimos un diagrama de puntos para visualizar la relacion entre variables
plt +
geom_point(mapping = aes(x = YearsExperience, y = Salary,
colour = Salary >= mean(Salary)),
size = 3,
alpha = 0.7) +
labs(title = "Years Experience vs Salary",
color = "Mean") +
scale_color_manual(labels = c("Menor", "Mayor"),
values = c("#C4961A", "#00AFBB"))
edades <- c(20, 22, 19, 17, 23, 22, 22, 21, ,20,20,21,18)
edades <- c(20, 22, 19, 17, 23, 22, 22, 21, 18,20,20,21,18)
edades
summary(edades)
boxplot(edades)
hist(edades)
hist(edades, breaks = 5)
hist(edades, breaks = 8)
hist(edades, freq = F)
hist(edades, freq = T)
hist(edades, freq = F)
append(edades, 65)
edades <- append(edades, 65)
edades
summary(edades)
boxplot(edades)
edades
count(edades)
table(edades)
table(edades)[1]
sort(edades)
edades <- sort(edades)
edades
table(edades)
as.tibble(table(edades))
as_tibble(table(edades))
edades <- as_tibble(table(edades))
edades
edades$edades <- as.integer(edades$edades)
edades
edades <- edades %>% rename(Edades = edades, Frecuencia = n)
edades
summary(edades$Edades)
weighted.mean(x = edades$Edades, w = edades$Frecuencia)
rm(edades)
edades <- c(20, 22, 19, 17, 23, 22, 22, 21, 18,20,20,21,18)
table(edades)
pesos <- c(3, 3, 1, 1, 1, 3, 3, 2, 2, 3, 3, 2, 2)
weighted.mean(x = edades, w = pesos)
summary(edades)
tabulate(edades)
count(edades)
rm(edades)
rm(pesos)
# Regresion Lineal Simple
#
#
# Carga de librerias
library(tidyverse)
datos <- read_csv("Datasets/Salary_Data.csv")
View(datos)
# Manejo de valores nulos NA
dataset %>% replace_na(list(Age = round(mean(dataset$Age, na.rm = T)),
Salary = round(mean(dataset$Salary, na.rm = T)))) -> dataset
dataset <- dplyr::as_tibble(dataset)
glimpse(dataset)
# Manejo de valores nulos NA
dataset %>% replace_na(list(Age = round(mean(dataset$Age, na.rm = T)),
Salary = round(mean(dataset$Salary, na.rm = T)))) -> dataset
datos <- read_csv("Datasets/Salary_Data.csv")
View(datos)
# Estadisticas basicas de las variables X e Y
summary(datos)
# Tanto en X como en Y, la media es mayor a la mediana, lo cual indica que la
# distribucion de los datos en ambas variables esta sesgada hacia la derecha.
#
# Construimos un diagrama de caja para visualizar mejor las estadisticas basicas
plt <- ggplot(data = datos)
plt +
geom_boxplot(mapping = aes(x = YearsExperience), fill = "#00AFBB", alpha = 0.7) +
coord_flip() +
ggtitle(label = "Years Experience Boxplot") # No presenta outliers
plt +
geom_boxplot(mapping = aes(y = Salary), fill = "#C4961A", alpha = 0.7) +
ggtitle(label = "Salary Boxplot") # No presenta outliers
#
# Construimos un histograma para visualizar mejor la distribucion de los datos
plt +
geom_histogram(mapping = aes(x = YearsExperience),
bins = 8,
fill = "#00AFBB",
alpha = 0.7) +
labs(title = "Years Experience Histogram",
x = "Years Experience",
y = "Count")
plt +
geom_histogram(mapping = aes(x = Salary),
bins = 8,
fill = "#C4961A",
alpha = 0.7) +
labs(title = "Salary Histogram",
x = "Salary",
y = "Count")
#
#
# Construimos un diagrama de puntos para visualizar la relacion entre variables
plt +
geom_point(mapping = aes(x = YearsExperience, y = Salary,
colour = Salary >= mean(Salary)),
size = 3,
alpha = 0.7) +
labs(title = "Years Experience vs Salary",
color = "Mean") +
scale_color_manual(labels = c("Menor", "Mayor"),
values = c("#C4961A", "#00AFBB"))
#
# La interpretacion del grafico de puntos es que parece que existe una relacion
# lineal entre las variables. Esto sera confirmado con un analisis de correlacion
# y el modelo de regresion lineal.
#
#
# Preparacion del dataset para el analisis de regresion
#
#   * Cambiamos los nombres de las variables para trabajar con mayor comodidad
datos <- datos %>% rename(X = YearsExperience, Y = Salary)
#
#
#   * Division del dataset en training y testing
set.seed(123)
split = sample.split(datos$Y, SplitRatio = 0.8)
#
#
#   * Division del dataset en training y testing
library(caTools)
split = sample.split(datos$Y, SplitRatio = 0.8)
split # Los valores TRUE son para training y los FALSE para testing
training_set <- subset(datos, split == T)
testing_set <- subset(datos, split == F)
View(training_set)
View(testing_set)
2/3
split = sample.split(datos$Y, SplitRatio = 2/3)
split # Los valores TRUE son para training y los FALSE para testing
training_set <- subset(datos, split == T)
testing_set <- subset(datos, split == F)
View(training_set)
View(testing_set)
#
#
# Creacion del modelo de regresion lineal
#
#
regressor <- lm(formula = Y ~ X, data = training_set)
#
#
# Analisis del modelo
summary(regressor)
anova(regressor)
confint(regressor)
regressor$coefficients[1]
regressor$coefficients[2]
regressor$model
#
# Analisis grafico del modelo
plt_training <- ggplot(data = regressor)
plt_training$layers
plt_training$theme
coef(regressor$coefficients)[[2]]
regressor.lm
regressor$coefficients[[2]]
regressor$coefficients[[1]]
regressor$coefficients[[2]]
regressor$coefficients
#
# Analisis grafico del modelo
plt_training <- ggplot(data = training_set)
plt_training +
geom_point(aes(X,Y))
plt_training +
geom_point(aes(X,Y)) +
geom_abline(slope = regressor$coefficients[[2]], intercept = regressor$coefficients[[1]])
plt_training +
geom_point(aes(X,Y),
colour = "#F8766D" ) +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]])
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D")
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(aes(mean(Y)))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(aes(y = mean(Y)))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(aes(y = mean(training_set$Y)))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(aes(y = mean(Y)))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(data = training_set, mapping = aes(y = mean(Y)))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(mean(Y))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(yintercept = mean(Y))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(data = training_set, yintercept = mean(Y))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(yintercept = Y)
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(aes(Y), yintercept = mean(Y))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(mean(training_set$Y))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(yintercept = mean(training_set$Y))
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(yintercept = mean(training_set$Y),
colour = "#7CAE00")
#
#
# Predicciones
#
# Los nombres de columnas deben ser iguales para la funcion predict()
y_pred <- predict(object = regressor, newdata = testing_set)
y_pred
tibble(Y = testing_set$Y, Y_pred = y_pred)
View(tibble(Y = testing_set$Y, Y_pred = y_pred))
View(tibble(Y_test = testing_set$Y, Y_pred = y_pred))
ggplot(data = testing_set) +
geom_point(aes(X,Y))
ggplot(data = testing_set) +
geom_point(aes(X,Y),
colour = "#00BFC4")
ggplot(data = testing_set) +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_point(aes(X, predict(regressor, testing_set)))
ggplot(data = testing_set) +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_point(aes(X, predict(regressor, testing_set)),
colour = "#F8766D" )
ggplot(data = testing_set) +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_point(aes(X, predict(regressor, testing_set)),
colour = "#F8766D" ) +
labs(x = "X", y = " ")
ggplot(data = testing_set) +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_point(aes(X, predict(regressor, testing_set)),
colour = "#F8766D" ) +
labs(x = "X", y = " ") +
scale_colour_manual(labs = c("Testing", "Prediction"),
values = c("#00BFC4", "#F8766D"))
ggplot(data = testing_set) +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_point(aes(X, predict(regressor, testing_set)),
colour = "#F8766D" ) +
labs(x = "X", y = " ") +
scale_colour_manual(label = c("Testing", "Prediction"),
values = c("#00BFC4", "#F8766D"))
ggplot(data = testing_set) +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_point(aes(X, predict(regressor, testing_set)),
colour = "#F8766D" ) +
labs(x = "X", y = " ") +
scale_colour_manual(labels = c("Testing", "Prediction"),
values = c("#00BFC4", "#F8766D"))
ggplot(data = testing_set) +
geom_point(aes(X,Y)) +
geom_point(aes(X, predict(regressor, testing_set))) +
labs(x = "X", y = " ", colour = "Regression") +
scale_colour_manual(labels = c("Testing", "Prediction"),
values = c("#00BFC4", "#F8766D"))
ggplot(data = testing_set, aes(X,Y)) +
geom_point() +
geom_point(aes(X, predict(regressor, testing_set))) +
labs(x = "X", y = " ", colour = "Regression") +
scale_colour_manual(labels = c("Testing", "Prediction"),
values = c("#00BFC4", "#F8766D"))
ggplot(data = testing_set, aes(X,Y)) +
geom_point()
ggplot(data = testing_set, aes(X,Y)) +
geom_point() +
geom_point(aes(X, predict(regressor, testing_set)))
ggplot(data = testing_set, aes(X,Y)) +
geom_point() +
geom_abline(aes(X, predict(regressor, testing_set))) +
ggplot(data = testing_set, aes(X,Y)) +
geom_point() +
geom_abline(aes(X, predict(regressor, testing_set)))
ggplot(data = testing_set) +
geom_point(aes(X,Y)) +
geom_abline(aes(X, predict(regressor, testing_set)))
ggplot(data = testing_set) +
geom_point(aes(X,Y)) +
geom_abline(aes(X, predict(regressor, testing_set)))
ggplot(data = testing_set) +
geom_point(aes(X,Y)) +
geom_abline(intercept = regressor$coefficients[[1]],
slope = regressor$coefficients[[2]] )
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
geom_hline(yintercept = mean(training_set$Y),
colour = "#7CAE00")
ggplot(data = testing_set) +
geom_point(aes(X,Y)) +
geom_abline(intercept = regressor$coefficients[[1]],
slope = regressor$coefficients[[2]] )
ggplot(data = testing_set) +
geom_point(aes(X,Y)) +
geom_abline(intercept = regressor$coefficients[[1]],
slope = regressor$coefficients[[2]] ) +
geom_smooth(aes(X,Y), method = "lm")
ggplot(data = testing_set) +
geom_point(aes(X,Y)) +
geom_abline(intercept = regressor$coefficients[[1]],
slope = regressor$coefficients[[2]], show.legend = T)
ggplot(data = testing_set) +
geom_point(aes(X,Y)) +
geom_abline(intercept = regressor$coefficients[[1]],
slope = regressor$coefficients[[2]])
plt_training +
geom_point(aes(X,Y),
colour = "#00BFC4") +
geom_abline(slope = regressor$coefficients[[2]],
intercept = regressor$coefficients[[1]],
colour = "#F8766D") +
labs(title = "Training Model")
ggplot(data = testing_set) +
geom_point(aes(X,Y),
colour = "#F8766D") +
geom_abline(intercept = regressor$coefficients[[1]],
slope = regressor$coefficients[[2]],
colour = "#00BFC4") +
labs(title = "Testing Regressor")
ggplot(data = testing_set) +
geom_point(aes(X,Y),
colour = "#F8766D") +
geom_abline(intercept = regressor$coefficients[[1]],
slope = regressor$coefficients[[2]],
colour = "#00BFC4") +
labs(title = "Testing Model")
# Regresion Lineal Simple
#
#
# Carga de librerias
library(tidyverse)
ggplot(data = testing_set) +
geom_point(aes(X,Y),
colour = "#F8766D") +
geom_abline(intercept = regressor$coefficients[[1]],
slope = regressor$coefficients[[2]],
colour = "#00BFC4") +
labs(title = "Testing Model")
