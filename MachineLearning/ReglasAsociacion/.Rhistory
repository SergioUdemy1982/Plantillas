# Librerias
library(tidyverse)
# Datos
dataset <- read_csv(file = "Datasets/Market_Basket_Optimisation.csv")
View(dataset)
# Datos
dataset <- read_csv(file = "Datasets/Market_Basket_Optimisation.csv", header=F)
# Datos
dataset <- read.csv(file = "Datasets/Market_Basket_Optimisation.csv", header=F)
install.packages("arules")
library(arules)
# Creamos una matriz esparcet, para eliminar los espacios vacios
dataset <- read.transactions(file = "Datasets/Market_Basket_Optimisation.csv",
sep = ",")
View(dataset)
# Creamos una matriz esparcet, para eliminar los espacios vacios
dataset <- read.transactions(file = "Datasets/Market_Basket_Optimisation.csv",
sep = ",",
rm.duplicates = T)
View(dataset)
summary(dataset)
itemFrequencyPlot(dataset, topN=10)
# Datos
df <- read.csv(file = "Datasets/Market_Basket_Optimisation.csv", header=F)
View(df)
library(arules)
# Datos
df <- read.csv(file = "Datasets/Market_Basket_Optimisation.csv", header=F)
summary(dataset)
library(arules)
summary(dataset)
itemFrequencyPlot(dataset, topN=10)
itemFrequencyPlot(dataset, topN=100)
rules <- apriori(data = dataset,
parameter = list(support= 3*7/7500, # 3 productos diarios
confidence=0.8))   # Nivel de confianza defaul
?apriori
3*7*7500
3*7/7500
rules <- apriori(data = dataset,
parameter = list(support= 3*7/7500, # 3 productos diarios
confidence=0.5))   # Nivel de confianza defaul
rules <- apriori(data = dataset,
parameter = list(support= 3*7/7500, # 3 productos diarios
confidence=0.6))   # Nivel de confianza defaul
library(arules)
confidence=0.4)   # Nivel de confianza defaul
rules <- apriori(data = dataset,
parameter = list(support= 3*7/7500, # 3 productos diarios
confidence=0.4))   # Nivel de confianza defaul
# Visualizacion de los resultados
inspect(rules[1:20])
# Visualizacion de los resultados
inspect(sort(rules, by "lift")[1:20])
# Visualizacion de los resultados
inspect(sort(rules, by="lift")[1:20])
rules <- apriori(data = dataset,
parameter = list(support= 3*7/7500, # 3 productos diarios
confidence=0.6))   # Nivel de confianza defaul
# Visualizacion de los resultados
inspect(sort(rules, by="lift")[1:20])
# Visualizacion de los resultados
inspect(sort(rules, by="lift")[1:13])
rules <- apriori(data = dataset,
parameter = list(support= 3*7/7500, # 3 productos diarios
confidence=0.2))   # Nivel de confianza defaul
# Visualizacion de los resultados
inspect(sort(rules, by="lift")[1:20])
rules <- apriori(data = dataset,
parameter = list(support= 4*7/7500, # 3 productos diarios
confidence=0.2))   # Nivel de confianza defaul
# Visualizacion de los resultados
inspect(sort(rules, by="lift")[1:20])
library(arulesViz)
install.packages("arulesViz")
library(arulesViz)
# Grafo
# visualizations ---------------------------------------------------------
plot(rules, method = "graph", engine = "htmlwidget")
# Grafo
# visualizations ---------------------------------------------------------
plot(rules[1:20], method = "graph", engine = "htmlwidget")
View(df)
library(arules)
library(arulesViz)
# Datos
df <- read.csv(file = "Datasets/Market_Basket_Optimisation.csv", header=F)
# Creamos una matriz sparse, para eliminar los espacios vacios
dataset <- read.transactions(file = "Datasets/Market_Basket_Optimisation.csv",
sep = ",",
rm.duplicates = T)
summary(dataset)
itemFrequencyPlot(dataset, topN=100)
itemFrequencyPlot(dataset, topN=20)
rules <- eclat(data = dataset,
parameter = list(support= 4*7/7500))
rules <- eclat(data = dataset,
parameter = list(support= 4*7/7500,
minlen = 2))
rules <- eclat(data = dataset,
parameter = list(support= 0.004,
minlen = 2))
# Visualizacion de los resultados
inspect(sort(rules, by="support")[1:20])
View(df)
rules <- eclat(data = dataset,
parameter = list(support= 0.004,
minlen = 3))
# Visualizacion de los resultados
inspect(sort(rules, by="support")[1:20])
df <- read.csv(file = "Datasets/Market_Basket_Optimisation.csv", header=F)
# Creamos una matriz sparse, para eliminar los espacios vacios
dataset <- read.transactions(file = "Datasets/Market_Basket_Optimisation.csv",
sep = ",",
rm.duplicates = T)
summary(dataset)
itemFrequencyPlot(dataset, topN=100)
# Modelo de reglas de asociacion
rules <- apriori(data = dataset,
parameter = list(support= 4*7/7500, # 3 productos diarios
confidence=0.2))   # Nivel de confianza defaul
# Visualizacion de los resultados
inspect(sort(rules, by="lift")[1:20])
itemFrequencyPlot(dataset, topN=20)
# Visualizacion de los resultados
inspect(sort(rules, by="lift")[1:20])
# Grafo
# visualizations ---------------------------------------------------------
plot(rules[1:20], method = "graph", engine = "htmlwidget")
df <- read.csv(file = "Datasets/Market_Basket_Optimisation.csv", header=F)
# Creamos una matriz sparse, para eliminar los espacios vacios
dataset <- read.transactions(file = "Datasets/Market_Basket_Optimisation.csv",
sep = ",",
rm.duplicates = T)
summary(dataset)
itemFrequencyPlot(dataset, topN=20)
# Modelo de reglas de asociacion Eclat
rules <- eclat(data = dataset,
parameter = list(support= 0.004,
minlen = 3))
# Visualizacion de los resultados
inspect(sort(rules, by="support")[1:20])
# Grafo
# visualizations ---------------------------------------------------------
plot(rules[1:20], method = "graph", engine = "htmlwidget")
rules <- eclat(data = dataset,
parameter = list(support= 0.5,
minlen = 3))
rules <- eclat(data = dataset,
parameter = list(support= 0.4,
minlen = 3))
# Visualizacion de los resultados
inspect(sort(rules, by="support")[1:20])
rules <- eclat(data = dataset,
parameter = list(support= 0.1,
minlen = 3))
# Visualizacion de los resultados
inspect(sort(rules, by="support")[1:20])
# Visualizacion de los resultados
inspect(sort(rules, by="support")[1:1])
rules <- eclat(data = dataset,
parameter = list(support= 0.09,
minlen = 3))
rules <- eclat(data = dataset,
parameter = list(support= 0.01,
minlen = 3))
# Visualizacion de los resultados
inspect(sort(rules, by="support")[1:10])
rules <- eclat(data = dataset,
parameter = list(support= 0.001,
minlen = 3))
rules <- eclat(data = dataset,
parameter = list(support= 0.002,
minlen = 3))
rules <- eclat(data = dataset,
parameter = list(support= 0.003,
minlen = 3))
# Visualizacion de los resultados
inspect(sort(rules, by="support")[1:100])
rules <- eclat(data = dataset,
parameter = list(support= 0.004,
minlen = 3))
# Visualizacion de los resultados
inspect(sort(rules, by="support")[1:20])
# Visualizacion de los resultados
inspect(sort(rules, by="support")[20:40])
View(rules)
