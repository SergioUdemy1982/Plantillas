# Importing the dataset
dataset = read.csv("Datasets/Churn_Modelling.csv")
View(dataset)
# Librerias
library(tidyverse)
# Importing the dataset
dataset = read_csv(file = "Datasets/Churn_Modelling.csv")
library(magrittr)
dataset %>%
select(-c(1:3))
dataset %>%
select(-c(1:3,14))
dataset %>%
select(-c(1:13))
# Revision de valores nulos
apply(X = dataset, MARGIN = 2, FUN = is.na) %>%
apply(X = ., MARGIN = 2, FUN = sum)
glimpse(dataset)
# Definicion de predictores y variable respuesta
dataset %>%
select(-c(1:3,14)) -> X
dataset %>%
select(-c(1:13)) -> y
View(X)
View(y)
library(tidyverse)
library(magrittr)
View(X)
rm(X)
rm(y)
# Seleccionamos las variables a utilizar
dataset %<>%
select(-c(1:3))
dataset$Geography <- as.numeric(factor(dataset$Geography,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3)))
dataset$Gender <- as.numeric(factor(dataset$Gender,
levels = c("Female", "Male"),
labels = c(0,1)))
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Escalado
training_set = scale(training_set)
test_set = scale(test_set)
View(test_set)
View(training_set)
dataset = read_csv(file = "Datasets/Churn_Modelling.csv")
glimpse(dataset)
# Revision de valores nulos
apply(X = dataset, MARGIN = 2, FUN = is.na) %>%
apply(X = ., MARGIN = 2, FUN = sum)
# Seleccionamos las variables a utilizar
dataset %<>%
select(-c(1:3))
# Codificamos variables categoricas
dataset$Geography <- as.numeric(factor(dataset$Geography,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3)))
dataset$Gender <- as.numeric(factor(dataset$Gender,
levels = c("Female", "Male"),
labels = c(0,1)))
# Separar dataset en training y testing
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Escalado
training_set = scale(training_set[, -11])
test_set = scale(test_set[, -11])
View(training_set)
View(test_set)
dataset = read_csv(file = "Datasets/Churn_Modelling.csv")
glimpse(dataset)
# Revision de valores nulos
apply(X = dataset, MARGIN = 2, FUN = is.na) %>%
apply(X = ., MARGIN = 2, FUN = sum)
# Seleccionamos las variables a utilizar
dataset %<>%
select(-c(1:3))
# Codificamos variables categoricas
dataset$Geography <- as.numeric(factor(dataset$Geography,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3)))
dataset$Gender <- as.numeric(factor(dataset$Gender,
levels = c("Female", "Male"),
labels = c(0,1)))
# Separar dataset en training y testing
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Escalado
training_set[, -11] = scale(training_set[, -11])
test_set[, -11] = scale(test_set[, -11])
View(test_set)
View(training_set)
install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
y_pred <- ifelse(prob_pred > 0.5, 1, 0)
# Predicciones
prob_pred = h2o.predict(classifier, newdata = testing_set[, -11])
# Predicciones
prob_pred = h2o.predict(classifier, newdata = test_set[, -11])
# Predicciones
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[, -11]))
y_pred <- ifelse(prob_pred > 0.5, 1, 0)
# Matriz de confusion
table(test_set[, -11], ypred)
# Matriz de confusion
table(test_set[, -11], y_pred)
y_pred <- prob_pred > 0.5
prob_pred > 0.5 %>%
as.vector(.)
prob_pred > 0.5 %>%
as.vector(.) -> y_pred
# Matriz de confusion
table(test_set[, -11], y_pred)
View(y_pred)
y_pred <- prob_pred > 0.5
y_pred <- as.vector(y_pred)
# Matriz de confusion
table(test_set[, -11], y_pred)
# Matriz de confusion
table(test_set[, 11], y_pred)
y_pred
test_set[, 11]
# Matriz de confusion
table(test_set[,11], y_pred)
test_set[,11]
length(test_set[,11]) == y_pred
length(test_set[,11]) == length(y_pred)
length(y_pred)
length(test_set[,11])
test_set[,11]
test_set[,11][[1]]
# Matriz de confusion
table(test_set[,11][[1]], y_pred)
# Matriz de confusion
cm <- table(test_set[,11][[1]], y_pred)
cm
diag(cm)
sum(diag(cm))
accuracy <- sum(diag(cm)) / nrow(test_set[,11])
accuracy
# Cerrar servidor
h2o.shutdown()
