# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/rel-zizler/3/R")
# Finally, let's load H2O and start up an H2O cluster
library(h2o)
h2o.init()
# Finalizar servidor
h20.clusterInfo()
# Finalizar servidor
h2o.clusterInfo()
h2o.shutdown()
# Carga de datos
library(h2o)
h2o.init(nthreads = -1)
airlinesURL = "https://s3.amazonaws.com/h2o-airlines-unpacked/allyears2k.csv"
airlines.hex = h2o.importFile(path = airlinesURL,
destination_frame = "airlines.hex")
summary(airlines.hex)
# Cuantiles e histogramas
quantile(x = airlines.hex$ArrDelay, na.rm = T)
h2o.hist(x = airlines.hex$ArrDelay)
colnames(x = airlines.hex)
# Numero de vuelos por aeropuerto
originFlights = h2o.group_by(data = airlines.hex,
by = "Origin",
nrow("Origin"),
gb.control = list(na.methods="rm"))
originFlights.R = as.data.frame(originFlights)
View(originFlights.R)
# Vuelos por mes
flightsByMonth = h2o.group_by(data = airlines.hex,
by = "Month",
nrow("Month"),
gb.control = list(na.methods = "rm"))
flightsByMonth.R = as.data.frame(flightsByMonth)
View(flightsByMonth.R)
# Meses con la tasa mas alta de vuelos cancelados
which(colnames(airlines.hex) == "Cancelled")
cancellationsByMonth = h2o.group_by(data = airlines.hex,
by = "Month",
sum("Cancelled"),
gb.control = list(na.methods = "rm"))
cancellationRate = cancellationsByMonth$sum_Cancelled / flightsByMonth$nrow
rates_table = h2o.cbind(flightsByMonth$Month, cancellationRate)
rates_table.R = as.data.frame(rates_table)
View(rates_table.R)
# Dataset en train y test
airlines.split = h2o.splitFrame(data = airlines.hex, ratios = 0.85)
airlines.train = airlines.split[[1]]
airlines.test = airlines.split[[2]]
h2o.table(airlines.train$Cancelled)
h2o.test(airlines.test$Cancelled)
h2o.table(airlines.test$Cancelled)
# Designamos los predictores y variable respuesta
colnames(airlines.hex)
Y = "IsDepDelayed"
X = c("Origin","Dest", "DayofMonth","Year","UniqueCarrier","DayofWeek",
"Month","Deptime","ArrTime","Distance")
# Modelo
airlines.glm <- h2o.glm(training_frame = airlines.train,
x = X,
y = Y,
family = "binomial",
alpha = 0.5)
X = c("Origin","Dest", "DayofMonth","Year","UniqueCarrier","DayOfWeek",
"Month","DepTime","ArrTime","Distance")
# Modelo
airlines.glm <- h2o.glm(training_frame = airlines.train,
x = X,
y = Y,
family = "binomial",
alpha = 0.5)
summary(airlines.glm)
pred = h2o.predict(object = airlines.glm, newdata = airlines.test)
summary(pred$p1)
summary(pred)
pred
pred > 0.5
as.vector(pred > 0.5)
as.vector(pred)
h2o.confusionMatrix(pred)
h2o.confusionMatrix(airlines.glm)
h2o.auc(object = airlines.glm)
h2o.hit_ratio_table(object = airlines.glm)
summary(pred$YES)
h2o.table(x = pred$NO, y = pred$YES)
h2o.confusionMatrix(airlines.glm)
pred
pred[500:520,]
h2o.confusionMatrix(airlines.glm)
h2o.confusionMatrix(object = airlines.glm)
airlines.test
airlines.test[,-"IsDepDelayed"]
str(airlines.glm)
h2o.str(airlines.test)
airlines.test[, X]
pred = h2o.predict(object = airlines.glm, newdata = airlines.test[, X])
h2o.confusionMatrix(airlines.glm)
pred
h2o.shutdown()
